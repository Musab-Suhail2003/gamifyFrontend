// Mocks generated by Mockito 5.4.4 from annotations
// in Gamify/test/login_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:flutter/foundation.dart' as _i8;
import 'package:flutter/material.dart' as _i7;
import 'package:Gamify/api/api_repo.dart' as _i9;
import 'package:Gamify/pages/login.dart' as _i11;
import 'package:Gamify/models/milestone_model.dart' as _i4;
import 'package:Gamify/models/quest_model.dart' as _i3;
import 'package:Gamify/models/task_model.dart' as _i5;
import 'package:Gamify/models/user_model.dart' as _i6;
import 'package:Gamify/pages/quest_page.dart' as _i13;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuestModel_1 extends _i1.SmartFake implements _i3.QuestModel {
  _FakeQuestModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMilestone_2 extends _i1.SmartFake implements _i4.Milestone {
  _FakeMilestone_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTask_3 extends _i1.SmartFake implements _i5.Task {
  _FakeTask_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_4 extends _i1.SmartFake implements _i6.UserModel {
  _FakeUserModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_5 extends _i1.SmartFake implements _i7.Widget {
  _FakeWidget_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatelessElement_6 extends _i1.SmartFake
    implements _i7.StatelessElement {
  _FakeStatelessElement_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_7 extends _i1.SmartFake
    implements _i7.DiagnosticsNode {
  _FakeDiagnosticsNode_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i8.TextTreeConfiguration? parentConfiguration,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeState_8<T extends _i7.StatefulWidget> extends _i1.SmartFake
    implements _i7.State<T> {
  _FakeState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_9 extends _i1.SmartFake
    implements _i7.StatefulElement {
  _FakeStatefulElement_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i9.ApiRepository {
  MockApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i10.Future<List<_i3.QuestModel>> fetchUsersQuests() => (super.noSuchMethod(
        Invocation.method(
          #fetchUsersQuests,
          [],
        ),
        returnValue:
            _i10.Future<List<_i3.QuestModel>>.value(<_i3.QuestModel>[]),
      ) as _i10.Future<List<_i3.QuestModel>>);

  @override
  _i10.Future<_i3.QuestModel> fetchQuestModel(int? questId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchQuestModel,
          [questId],
        ),
        returnValue: _i10.Future<_i3.QuestModel>.value(_FakeQuestModel_1(
          this,
          Invocation.method(
            #fetchQuestModel,
            [questId],
          ),
        )),
      ) as _i10.Future<_i3.QuestModel>);

  @override
  _i10.Future<List<_i4.Milestone>> fetchMilestonebyQuest(dynamic questId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMilestonebyQuest,
          [questId],
        ),
        returnValue: _i10.Future<List<_i4.Milestone>>.value(<_i4.Milestone>[]),
      ) as _i10.Future<List<_i4.Milestone>>);

  @override
  _i10.Future<_i4.Milestone> fetchMilestone(dynamic milestoneId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMilestone,
          [milestoneId],
        ),
        returnValue: _i10.Future<_i4.Milestone>.value(_FakeMilestone_2(
          this,
          Invocation.method(
            #fetchMilestone,
            [milestoneId],
          ),
        )),
      ) as _i10.Future<_i4.Milestone>);

  @override
  _i10.Future<_i5.Task> fetchTask(dynamic taskId) => (super.noSuchMethod(
        Invocation.method(
          #fetchTask,
          [taskId],
        ),
        returnValue: _i10.Future<_i5.Task>.value(_FakeTask_3(
          this,
          Invocation.method(
            #fetchTask,
            [taskId],
          ),
        )),
      ) as _i10.Future<_i5.Task>);

  @override
  _i10.Future<List<_i5.Task>> fetchTaskbyMilestone(dynamic milestoneId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTaskbyMilestone,
          [milestoneId],
        ),
        returnValue: _i10.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i10.Future<List<_i5.Task>>);

  @override
  _i10.Future<_i6.UserModel> fetchUserModel(dynamic userId) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserModel,
          [userId],
        ),
        returnValue: _i10.Future<_i6.UserModel>.value(_FakeUserModel_4(
          this,
          Invocation.method(
            #fetchUserModel,
            [userId],
          ),
        )),
      ) as _i10.Future<_i6.UserModel>);

  @override
  _i10.Future<void> postUserModel(_i6.UserModel? userModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUserModel,
          [userModel],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> postQuestModelbyUser(_i3.QuestModel? questModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #postQuestModelbyUser,
          [questModel],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> postMilestone(_i4.Milestone? milestone) =>
      (super.noSuchMethod(
        Invocation.method(
          #postMilestone,
          [milestone],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> postTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #postTask,
          [task],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [GoogleSignInProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInProvider extends _i1.Mock
    implements _i9.GoogleSignInProvider {
  MockGoogleSignInProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<dynamic> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [LoginPage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginPage extends _i1.Mock implements _i11.LoginPage {
  MockLoginPage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Widget build(_i7.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_5(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i7.Widget);

  @override
  _i7.StatelessElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatelessElement_6(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i7.StatelessElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i8.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i7.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i8.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i7.DiagnosticsNode);

  @override
  List<_i7.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i7.DiagnosticsNode>[],
      ) as List<_i7.DiagnosticsNode>);

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [QuestPage].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestPage extends _i1.Mock implements _i13.QuestPage {
  MockQuestPage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.State<_i13.QuestPage> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_8<_i13.QuestPage>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i7.State<_i13.QuestPage>);

  @override
  _i7.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_9(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i7.StatefulElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i8.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i7.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i8.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i7.DiagnosticsNode);

  @override
  List<_i7.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i7.DiagnosticsNode>[],
      ) as List<_i7.DiagnosticsNode>);

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}
